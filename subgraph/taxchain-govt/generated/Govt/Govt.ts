// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Govt extends ethereum.SmartContract {
  static bind(address: Address): Govt {
    return new Govt("Govt", address);
  }

  govtAddress(): Address {
    let result = super.call("govtAddress", "govtAddress():(address)", []);

    return result[0].toAddress();
  }

  try_govtAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("govtAddress", "govtAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usedFunds(): BigInt {
    let result = super.call("usedFunds", "usedFunds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usedFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usedFunds", "usedFunds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _erc20TokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetERC20TokenAddressCall extends ethereum.Call {
  get inputs(): SetERC20TokenAddressCall__Inputs {
    return new SetERC20TokenAddressCall__Inputs(this);
  }

  get outputs(): SetERC20TokenAddressCall__Outputs {
    return new SetERC20TokenAddressCall__Outputs(this);
  }
}

export class SetERC20TokenAddressCall__Inputs {
  _call: SetERC20TokenAddressCall;

  constructor(call: SetERC20TokenAddressCall) {
    this._call = call;
  }

  get _erc20Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetERC20TokenAddressCall__Outputs {
  _call: SetERC20TokenAddressCall;

  constructor(call: SetERC20TokenAddressCall) {
    this._call = call;
  }
}

export class SetGovtAddressCall extends ethereum.Call {
  get inputs(): SetGovtAddressCall__Inputs {
    return new SetGovtAddressCall__Inputs(this);
  }

  get outputs(): SetGovtAddressCall__Outputs {
    return new SetGovtAddressCall__Outputs(this);
  }
}

export class SetGovtAddressCall__Inputs {
  _call: SetGovtAddressCall;

  constructor(call: SetGovtAddressCall) {
    this._call = call;
  }

  get _govtAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovtAddressCall__Outputs {
  _call: SetGovtAddressCall;

  constructor(call: SetGovtAddressCall) {
    this._call = call;
  }
}

export class TransferToCall extends ethereum.Call {
  get inputs(): TransferToCall__Inputs {
    return new TransferToCall__Inputs(this);
  }

  get outputs(): TransferToCall__Outputs {
    return new TransferToCall__Outputs(this);
  }
}

export class TransferToCall__Inputs {
  _call: TransferToCall;

  constructor(call: TransferToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferToCall__Outputs {
  _call: TransferToCall;

  constructor(call: TransferToCall) {
    this._call = call;
  }
}
